// Code generated by Kitex v0.6.2. DO NOT EDIT.

package publishservice

import (
	"context"
	publish "douyin/shared/rpc/kitex_gen/publish"
	rpc "douyin/shared/rpc/kitex_gen/rpc"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	PublishList(ctx context.Context, request *publish.DouyinPublishListRequest, callOptions ...callopt.Option) (r *publish.DouyinPublishListResponse, err error)
	PublishAction(ctx context.Context, request *publish.DouyinPublishActionRequest, callOptions ...callopt.Option) (r *publish.DouyinPublishActionResponse, err error)
	UpdateCommentCount(ctx context.Context, videoId int64, newCommentCount_ int64, callOptions ...callopt.Option) (err error)
	UpdateFavoriteCount(ctx context.Context, videoId int64, newFavoriteCount_ int64, callOptions ...callopt.Option) (err error)
	QueryRecentVideoInfos(ctx context.Context, startTime int64, limit int64, callOptions ...callopt.Option) (r []*rpc.VideoInfo, err error)
	VideoInfo(ctx context.Context, videoId int64, callOptions ...callopt.Option) (r *rpc.VideoInfo, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kPublishServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPublishServiceClient struct {
	*kClient
}

func (p *kPublishServiceClient) PublishList(ctx context.Context, request *publish.DouyinPublishListRequest, callOptions ...callopt.Option) (r *publish.DouyinPublishListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishList(ctx, request)
}

func (p *kPublishServiceClient) PublishAction(ctx context.Context, request *publish.DouyinPublishActionRequest, callOptions ...callopt.Option) (r *publish.DouyinPublishActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishAction(ctx, request)
}

func (p *kPublishServiceClient) UpdateCommentCount(ctx context.Context, videoId int64, newCommentCount_ int64, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateCommentCount(ctx, videoId, newCommentCount_)
}

func (p *kPublishServiceClient) UpdateFavoriteCount(ctx context.Context, videoId int64, newFavoriteCount_ int64, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateFavoriteCount(ctx, videoId, newFavoriteCount_)
}

func (p *kPublishServiceClient) QueryRecentVideoInfos(ctx context.Context, startTime int64, limit int64, callOptions ...callopt.Option) (r []*rpc.VideoInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryRecentVideoInfos(ctx, startTime, limit)
}

func (p *kPublishServiceClient) VideoInfo(ctx context.Context, videoId int64, callOptions ...callopt.Option) (r *rpc.VideoInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoInfo(ctx, videoId)
}
