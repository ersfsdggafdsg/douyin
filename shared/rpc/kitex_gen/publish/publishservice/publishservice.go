// Code generated by Kitex v0.6.2. DO NOT EDIT.

package publishservice

import (
	"context"
	publish "douyin/shared/rpc/kitex_gen/publish"
	rpc "douyin/shared/rpc/kitex_gen/rpc"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return publishServiceServiceInfo
}

var publishServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "PublishService"
	handlerType := (*publish.PublishService)(nil)
	methods := map[string]kitex.MethodInfo{
		"PublishList":           kitex.NewMethodInfo(publishListHandler, newPublishServicePublishListArgs, newPublishServicePublishListResult, false),
		"PublishAction":         kitex.NewMethodInfo(publishActionHandler, newPublishServicePublishActionArgs, newPublishServicePublishActionResult, false),
		"UpdateCommentCount":    kitex.NewMethodInfo(updateCommentCountHandler, newPublishServiceUpdateCommentCountArgs, newPublishServiceUpdateCommentCountResult, false),
		"UpdateFavoriteCount":   kitex.NewMethodInfo(updateFavoriteCountHandler, newPublishServiceUpdateFavoriteCountArgs, newPublishServiceUpdateFavoriteCountResult, false),
		"QueryRecentVideoInfos": kitex.NewMethodInfo(queryRecentVideoInfosHandler, newPublishServiceQueryRecentVideoInfosArgs, newPublishServiceQueryRecentVideoInfosResult, false),
		"VideoInfo":             kitex.NewMethodInfo(videoInfoHandler, newPublishServiceVideoInfoArgs, newPublishServiceVideoInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "publish",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServicePublishListArgs)
	realResult := result.(*publish.PublishServicePublishListResult)
	success, err := handler.(publish.PublishService).PublishList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServicePublishListArgs() interface{} {
	return publish.NewPublishServicePublishListArgs()
}

func newPublishServicePublishListResult() interface{} {
	return publish.NewPublishServicePublishListResult()
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServicePublishActionArgs)
	realResult := result.(*publish.PublishServicePublishActionResult)
	success, err := handler.(publish.PublishService).PublishAction(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServicePublishActionArgs() interface{} {
	return publish.NewPublishServicePublishActionArgs()
}

func newPublishServicePublishActionResult() interface{} {
	return publish.NewPublishServicePublishActionResult()
}

func updateCommentCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServiceUpdateCommentCountArgs)

	err := handler.(publish.PublishService).UpdateCommentCount(ctx, realArg.VideoId, realArg.NewCommentCount_)
	if err != nil {
		return err
	}

	return nil
}
func newPublishServiceUpdateCommentCountArgs() interface{} {
	return publish.NewPublishServiceUpdateCommentCountArgs()
}

func newPublishServiceUpdateCommentCountResult() interface{} {
	return publish.NewPublishServiceUpdateCommentCountResult()
}

func updateFavoriteCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServiceUpdateFavoriteCountArgs)

	err := handler.(publish.PublishService).UpdateFavoriteCount(ctx, realArg.VideoId, realArg.NewFavoriteCount_)
	if err != nil {
		return err
	}

	return nil
}
func newPublishServiceUpdateFavoriteCountArgs() interface{} {
	return publish.NewPublishServiceUpdateFavoriteCountArgs()
}

func newPublishServiceUpdateFavoriteCountResult() interface{} {
	return publish.NewPublishServiceUpdateFavoriteCountResult()
}

func queryRecentVideoInfosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServiceQueryRecentVideoInfosArgs)
	realResult := result.(*publish.PublishServiceQueryRecentVideoInfosResult)
	success, err := handler.(publish.PublishService).QueryRecentVideoInfos(ctx, realArg.StartTime, realArg.Limit)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServiceQueryRecentVideoInfosArgs() interface{} {
	return publish.NewPublishServiceQueryRecentVideoInfosArgs()
}

func newPublishServiceQueryRecentVideoInfosResult() interface{} {
	return publish.NewPublishServiceQueryRecentVideoInfosResult()
}

func videoInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServiceVideoInfoArgs)
	realResult := result.(*publish.PublishServiceVideoInfoResult)
	success, err := handler.(publish.PublishService).VideoInfo(ctx, realArg.VideoId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServiceVideoInfoArgs() interface{} {
	return publish.NewPublishServiceVideoInfoArgs()
}

func newPublishServiceVideoInfoResult() interface{} {
	return publish.NewPublishServiceVideoInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PublishList(ctx context.Context, request *publish.DouyinPublishListRequest) (r *publish.DouyinPublishListResponse, err error) {
	var _args publish.PublishServicePublishListArgs
	_args.Request = request
	var _result publish.PublishServicePublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishAction(ctx context.Context, request *publish.DouyinPublishActionRequest) (r *publish.DouyinPublishActionResponse, err error) {
	var _args publish.PublishServicePublishActionArgs
	_args.Request = request
	var _result publish.PublishServicePublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCommentCount(ctx context.Context, videoId int64, newCommentCount_ int64) (err error) {
	var _args publish.PublishServiceUpdateCommentCountArgs
	_args.VideoId = videoId
	_args.NewCommentCount_ = newCommentCount_
	var _result publish.PublishServiceUpdateCommentCountResult
	if err = p.c.Call(ctx, "UpdateCommentCount", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) UpdateFavoriteCount(ctx context.Context, videoId int64, newFavoriteCount_ int64) (err error) {
	var _args publish.PublishServiceUpdateFavoriteCountArgs
	_args.VideoId = videoId
	_args.NewFavoriteCount_ = newFavoriteCount_
	var _result publish.PublishServiceUpdateFavoriteCountResult
	if err = p.c.Call(ctx, "UpdateFavoriteCount", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) QueryRecentVideoInfos(ctx context.Context, startTime int64, limit int64) (r []*rpc.VideoInfo, err error) {
	var _args publish.PublishServiceQueryRecentVideoInfosArgs
	_args.StartTime = startTime
	_args.Limit = limit
	var _result publish.PublishServiceQueryRecentVideoInfosResult
	if err = p.c.Call(ctx, "QueryRecentVideoInfos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoInfo(ctx context.Context, videoId int64) (r *rpc.VideoInfo, err error) {
	var _args publish.PublishServiceVideoInfoArgs
	_args.VideoId = videoId
	var _result publish.PublishServiceVideoInfoResult
	if err = p.c.Call(ctx, "VideoInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
