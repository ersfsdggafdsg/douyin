// Code generated by hertz generator.

package message

import (
	"context"

	"douyin/shared/config"
	"douyin/shared/tools"
	"douyin/cmd/api/pkg/errhandler"
	kmessage "douyin/shared/rpc/kitex_gen/message"
	message "douyin/cmd/api/biz/model/message"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// MessageList .
// @router /douyin/message/chat [GET]
func MessageList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req message.DouyinMessageChatRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// Token字段不能够为空，因为要获取自己的聊天记录
	if req.Token == "" {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	token, err := tools.ParseToken(req.Token)
	if err != nil {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	resp, err := config.Clients.Message.MessageList(
		ctx,
		&kmessage.DouyinMessageChatRequest {
			UserId: token.Id,
			ToUserId: req.ToUserID,
			PreMsgTime: req.PreMsgTime,
		})
	if err != nil {
		errhandler.RPCCallErrorResponse("comment",
			err, consts.StatusInternalServerError, c)
	}

	c.JSON(consts.StatusOK, resp)
}

// MessageAction .
// @router /douyin/message/action [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req message.DouyinMessageActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// Token字段不能够为空，因为要获取自己的聊天记录
	if req.Token == "" {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	token, err := tools.ParseToken(req.Token)
	if err != nil {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	resp, err := config.Clients.Message.MessageAction(
		ctx,
		&kmessage.DouyinMessageActionRequest {
			UserId: token.Id,
			ToUserId: req.ToUserID,
			ActionType: req.ActionType,
			Content: req.Content,
		})
	if err != nil {
		errhandler.RPCCallErrorResponse("comment",
			err, consts.StatusInternalServerError, c)
	}

	c.JSON(consts.StatusOK, resp)
}
