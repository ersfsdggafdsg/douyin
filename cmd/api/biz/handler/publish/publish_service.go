// Code generated by hertz generator.

package publish

import (
	"context"
	"douyin/cmd/api/pkg/errhandler"
	"douyin/shared/config"
	kpublish "douyin/shared/rpc/kitex_gen/publish"
	"douyin/shared/utils"
	"douyin/shared/utils/errno"

	publish "douyin/cmd/api/biz/model/publish"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// PublishList .
// @router /douyin/publish/list [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		errhandler.ErrorResponse(err.Error(), errno.BadRequestCode, c)
		return
	}

	userId := ctx.Value("uid").(int64)

	resp, err := config.Clients.Publish.PublishList(
		ctx,
		&kpublish.DouyinPublishListRequest{
			UserId: userId,
		})
	if err != nil {
		hlog.Error("publish:", err)
		errhandler.RPCCallErrorResponse("Internal error",
			errno.ServiceErrCode, c)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PublishAction .
// @router /douyin/publish/action [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	req, err := parse(ctx, c)
	if err != nil {
		errhandler.ErrorResponse(err.Error(), errno.BadRequestCode, c)
		return
	}

	/* 虽然可以拦截，但是业务在Publish上
	if len(req.Title) == 0 || len(req.Data) == 0 || req.UserId <= 0 {
		hlog.Error("publish:", err)
		errhandler.ErrorResponse("Not login!",
			consts.StatusBadRequest, c)
	}
	*/

	resp, err := config.Clients.Publish.PublishAction(ctx, req)
	if err != nil {
		hlog.Error("publish:", err)
		errhandler.ErrorResponse("publish",
			errno.ServiceErrCode, c)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

func parse(ctx context.Context, c *app.RequestContext) (req *kpublish.DouyinPublishActionRequest, err error) {
	req = new(kpublish.DouyinPublishActionRequest)
	req.UserId = ctx.Value("uid").(int64)

	title := c.PostForm("title")
	if err != nil {
		return
	}

	data, err := c.FormFile("data")
	if err != nil {
		return
	}

	req.Data, err = utils.ReadMultipart(data)
	if err != nil {
		return
	}
	req.Title = title

	return
}
