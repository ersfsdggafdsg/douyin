// Code generated by hertz generator.

package publish

import (
	"context"
	"douyin/shared/config"
	"douyin/shared/tools"
	kpublish "douyin/shared/rpc/kitex_gen/publish"
	"douyin/cmd/api/pkg/errhandler"

	publish "douyin/cmd/api/biz/model/publish"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// PublishList .
// @router /douyin/publish/list [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// Token字段不能够为空，因为要获取自己的发布列表
	if req.Token == "" {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	token, err := tools.ParseToken(req.Token)
	if err != nil {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	resp, err := config.Clients.Publish.PublishList(
		ctx,
		&kpublish.DouyinPublishListRequest{
			UserId: token.Id,
		})
	if err != nil {
		errhandler.RPCCallErrorResponse("comment",
			err, consts.StatusInternalServerError, c)
	}

	c.JSON(consts.StatusOK, resp)
}

// PublishAction .
// @router /douyin/publish/action [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish.DouyinPublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// Token字段不能够为空，因为是登录用户操作发布视频
	if req.Token == "" {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	token, err := tools.ParseToken(req.Token)
	if err != nil {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	playUrl, err := tools.Upload(&req.Data)
	if err != nil {
		errhandler.ErrorResponse("Upload video failed:",
			err, consts.StatusInternalServerError, c)
		return
	}

	resp, err := config.Clients.Publish.PublishAction(
		ctx,
		&kpublish.DouyinPublishActionRequest{
			UserId: token.Id,
			PlayUrl: playUrl,
			Title: req.Title,
		})
	if err != nil {
		errhandler.RPCCallErrorResponse("comment",
			err, consts.StatusInternalServerError, c)
	}

	c.JSON(consts.StatusOK, resp)
}
