// Code generated by hertz generator.

package user

import (
	"context"
	user "douyin/cmd/api/biz/model/user"
	"douyin/cmd/api/pkg/errhandler"
	"douyin/shared/config"
	kuser "douyin/shared/rpc/kitex_gen/user"
	"douyin/shared/utils/errno"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Login .
// @router /douyin/user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.DouyinUserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		errhandler.ErrorResponse(err.Error(), errno.BadRequestCode, c)
		return
	}

	resp, err := config.Clients.User.Login(
		ctx,
		&kuser.DouyinUserLoginRequest{
			Username: req.Username,
			Password: req.Password,
		})
	if err != nil {
		hlog.Error("user:", err)
		errhandler.RPCCallErrorResponse("user",
			errno.ServiceErrCode, c)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// Register .
// @router /douyin/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	// 为什么参数一样却不能够使用kitex那边的RegisterRequest?
	// 下面的BindAndValidate会检查变量类型，Bind也试过了，不行。
	// Hertz这么设计，可能是出于安全考虑吧。（但是gin可以）
	var r user.DouyinUserRegisterRequest
	err = c.BindAndValidate(&r)
	if err != nil {
		errhandler.ErrorResponse(err.Error(), errno.BadRequestCode, c)
		return
	}

	req := kuser.DouyinUserRegisterRequest{
		Username: r.Username,
		Password: r.Password,
	}

	resp, err := config.Clients.User.Register(ctx, &req)
	if err != nil {
		hlog.Error("user:", err)
		errhandler.RPCCallErrorResponse("user",
			errno.ServiceErrCode, c)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UserInfo .
// @router /douyin/user [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		errhandler.ErrorResponse(err.Error(), errno.BadRequestCode, c)
		return
	}
	hlog.Info("获取用户信息：", req.UserID)

	userId := ctx.Value("uid").(int64)

	resp, err := config.Clients.User.UserInfo(
		ctx,
		&kuser.DouyinUserRequest{UserId: userId},
	)
	if err != nil {
		errhandler.RPCCallErrorResponse("Internal error",
			errno.ServiceErrCode, c)
		return
	}

	c.JSON(consts.StatusOK, resp)
}
