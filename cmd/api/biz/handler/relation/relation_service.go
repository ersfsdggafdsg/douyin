// Code generated by hertz generator.

package relation

import (
	"context"
	"douyin/shared/config"
	"douyin/shared/tools"
	krelation "douyin/shared/rpc/kitex_gen/relation"
	"douyin/cmd/api/pkg/errhandler"

	relation "douyin/cmd/api/biz/model/relation"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationAction .
// @router /douyin/relation/action [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// Token字段不能够为空，因为要获取自己的发布列表
	if req.Token == "" {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	token, err := tools.ParseToken(req.Token)
	if err != nil {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	resp, err := config.Clients.Relation.RelationAction(
		ctx,
		&krelation.DouyinRelationActionRequest{
			UserId: token.Id,
			ToUserId: req.ToUserID,
			ActionType: req.ActionType,
		})
	if err != nil {
		errhandler.RPCCallErrorResponse("relation",
			err, consts.StatusInternalServerError, c)
	}

	c.JSON(consts.StatusOK, resp)
}

// FollowList .
// @router /douyin/relation/follow/list [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// Token字段不能够为空，因为要获取自己的发布列表
	if req.Token == "" {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	token, err := tools.ParseToken(req.Token)
	if err != nil {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	resp, err := config.Clients.Relation.FollowList(
		ctx,
		&krelation.DouyinRelationFollowListRequest{
			UserId: token.Id,
		})
	if err != nil {
		errhandler.RPCCallErrorResponse("relation",
			err, consts.StatusInternalServerError, c)
	}

	c.JSON(consts.StatusOK, resp)
}

// FollowerList .
// @router /douyin/relation/follower/list [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// Token字段不能够为空，因为要获取自己的发布列表
	if req.Token == "" {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	token, err := tools.ParseToken(req.Token)
	if err != nil {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	resp, err := config.Clients.Relation.FollowerList(
		ctx,
		&krelation.DouyinRelationFollowerListRequest{
			UserId: token.Id,
		})
	if err != nil {
		errhandler.RPCCallErrorResponse("relation",
			err, consts.StatusInternalServerError, c)
	}

	c.JSON(consts.StatusOK, resp)
}

// FriendList .
// @router /douyin/relation/friend/list [GET]
func FriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// Token字段不能够为空，因为要获取自己的发布列表
	if req.Token == "" {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	token, err := tools.ParseToken(req.Token)
	if err != nil {
		errhandler.ParseTokenErrorResponse(
			err, consts.StatusBadRequest, c)
		return
	}

	resp, err := config.Clients.Relation.FriendList(
		ctx,
		&krelation.DouyinRelationFriendListRequest{
			UserId: token.Id,
		})
	if err != nil {
		errhandler.RPCCallErrorResponse("relation",
			err, consts.StatusInternalServerError, c)
	}
	c.JSON(consts.StatusOK, resp)
}
